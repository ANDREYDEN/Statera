rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /groups/{groupId} {
      // only authorize members to read group data
    	allow read: if true; //isGroupMember(); TODO: this does not work for joining groups
      
      // authorize any authenticated user to create groups
    	allow create: if request.auth != null;
      
      allow update: if true;

      // only authorize members to update certain group fields
    	allow update: if isGroupMember() && fieldsChanged(['balance']);

      // only authorize admins to change group settings
    	allow update: if isGroupAdmin() && fieldsChanged(['name', 'currencySign', 'inviteLink', 'adminId', 'debtThreshold']);
    }

    function isGroupAdmin() {
      return request.auth.uid == resource.data.adminId 
        || request.auth.uid == resource.data.memberIds[0];
    }

    function isGroupMember() {
      return request.auth.uid in resource.data.memberIds;
    }

    match /expenses/{expenseId} {
      // allow update: if isExpenseAssignee() && fieldsChanged(['items', 'unmarkedAssigneeIds'])
      // allow update: if isExpenseAuthor() && fieldsChanged(['name', 'finalizedDate', 'date', 'settings', 'assigneeIds', 'authorUid', 'items', 'unmarkedAssigneeIds'])
      allow update: if false

      // allow read: if isExpenseAuthor() || isExpenseAssignee()
      allow read: if request.auth.uid != null
      
      allow create: if isMemberOfExpenseGroup(request.resource.data)
      
      allow delete: if isExpenseAuthor();
    }

    function isExpenseAuthor() {
      return request.auth.uid == resource.data.authorUid;
    }

    function isExpenseAssignee() {
      return request.auth.uid in resource.data.assigneeIds;
    }

    function isMemberOfExpenseGroup(expense) {
      return request.auth.uid in get(/databases/$(database)/documents/groups/$(expense.groupId)).data.memberIds;
    }

    match /payments/{paymentId} {
      allow read, write: if request.auth != null;
    }

    match /users/{userId} {
      allow read, write: if request.auth != null;
    }

    match /users/{userId}/expenses/{expenseId} {
      allow read;
    }

    match /users/{userId}/groups/{groupId} {
      allow read, write: if request.auth != null;
    }

    function fieldsChanged(fields) {
      return debug(request.resource.data.diff(resource.data).changedKeys()).hasOnly(fields);
    }
  }
}